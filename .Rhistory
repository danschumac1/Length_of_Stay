library(tidyverse)
library(car)
library(gridExtra)
data(wine)
w = wine
survey = read_csv('../data/BankChurners-1.csv')
df = data('"USArrests")
knitr::opts_chunk$set(echo = TRUE)
df = data('"USArrests")
df = data("USArrests")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(factoextra)
install.packages('factoextra')
library(factoextra)
library(dendextend)
df = USArrests
df = na.omit(df)
#standardize
df = scale(df)
head(df,5)
# similarity matrix
d = dist(df, method = "euclidean")
d
#cluster
hc1 = hclust(
d,
method = 'complet'
)
plot(hc1,cex = 0.6,  hang = -1)
sub_group = cutree(
hc1,
k = 4
)
table(sub_group)
plot(
hc1,
cex = .6
rec.hclust(
plot(
hc1,
cex = .6)
rec.hclust(
hc1,
k = 4,
border = 2:5
)
plot(
hc1,
cex = .6)
rect.hclust(
hc1,
k = 4,
border = 2:5
)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(titanic)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(titanic)
dim(titanic_train)
summary(titanic_train)
ttrain = na.omit(
titanic_train
)
ttrain = subset(
ttrain, ttrain$Embarked != ''
)
ttrain = subset(
ttrain, ttrain$Cabin != ''
)
ttrain = na.omit(
titanic_train
)
ttrain = subset(
ttrain, ttrain$Embarked != ''
)
ttrain = subset(
ttrain, ttrain$Cabin != ''
)
row.number = sample(1:nrow(ttrain), .8*nrow(ttrain))
set.seed(1)
row.number = sample(1:nrow(ttrain), .8*nrow(ttrain))
titantrain = ttrain[row.number,]
titantest = ttrain[-row.number,]
#set up model
lda.model = lda(
factor(Survived) ~ factor(Pclass) + Sex + Age + SibSp,
data = titantrain
)
lada.model
lda.model
predictions.lda = predict(lda.model,titantest)
# confu matrix
caret:: confusionMatrix(
as.factor(
predictions.ldaa$class
)
)
# confu matrix
caret:: confusionMatrix(
as.factor(
predictions.lda$class
),
as.factor(titantest$Survived)
)
logmodel = glm(
factor(Survived) ~ factor(Pclass) + Sex + Age + SibSp,
data = titantrain,
family = binomial
)
summary(logmodel)
#make preds
predictions.log = predict(logmodel, newdata = titantest, types = 'response')
# convert from probs to preds
predictions.log.surv =
ifelse(
predictions.log >= .5,1,0
)
caret::confusionMatrix(
as.factor(predictions.log.surv),
as.factor(titantest$Survived)
)
library(car)
vif
?car::vif
library(microbenchmark)
install.packages("microbenchmark")
# Assuming `model` is a linear model object
microbenchmark(vif(model), times = 100)
# Assuming `model` is a linear model object
library(microbenchmark)
library(car)
# Assuming `model` is a linear model object
microbenchmark(vif(model), times = 100)
library(dplyr)
library(ggplot2)
library(readr)
library(car)  # For VIF calculation
library(dplyr)
library(ggplot2)
library(readr)
library(car)  # For VIF calculation
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
setwd("C:/Users/dansc/Documents/Gradschool/Analytics-Applications/Length_of_Stay")
library(dplyr)
library(ggplot2)
library(readr)
library(car)  # For VIF calculation
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Calculate LOSDiscrepancyCost
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - GM_LOS) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Calculate LOSDiscrepancyCost
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - GM_LOS) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
library(tidyr)
# Calculate LOSDiscrepancyCost
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - GM_LOS) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Calculate LOSDiscrepancyCost
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - GM_LOS) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
df_los
# Calculate LOSDiscrepancyCost
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - GM-LOS) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Calculate LOSDiscrepancyCost
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - GM_LOS) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
df_los
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(car)
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Ensure that column names are as expected
print(colnames(df_los))
# Check for leading or trailing spaces in column names which might cause reference issues
colnames(df_los) <- trimws(colnames(df_los))
# Let's examine the first few rows to ensure that data is read correctly
head(df_los)
# Assuming that your column names are correct and data looks fine, proceed with calculations
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%  # Use backticks if the name contains special characters or spaces
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Further manipulations and clean-up
regress_me <- df_los %>%
select(-c(patientID, LOS, LOSGroupName, totalCharge, dischargeStatus,
principleDiagnosisCode, principalProcedureCode, altProductLine1,
altProductLine1SUB, AM_LOS, GM_LOS, hospital, APR_DRG, dischargeQTR, principalDiagnosis))
# Further manipulations and clean-up
regress_me <- df_los %>%
select(-c(patientID, LOS, LOSGroupName, totalCharge, dischargeStatus,
principleDiagnosisCode, principalProcedureCode, altProductLine1,
altProductLine1SUB, `AM-LOS`, `GM-LOS`, hospital, `APR-DRG`, dischargeQTR, principalDiagnosis))
# Check for leading or trailing spaces in column names which might cause reference issues
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Ensure that column names are as expected
print(colnames(df_los))
# Check for leading or trailing spaces in column names which might cause reference issues
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Let's examine the first few rows to ensure that data is read correctly
head(df_los)
# Assuming that your column names are correct and data looks fine, proceed with calculations
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%  # Use backticks if the name contains special characters or spaces
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Further manipulations and clean-up
regress_me <- df_los %>%
select(-c(patientID, LOS, LOSGroupName, totalCharge, dischargeStatus,
principleDiagnosisCode, principalProcedureCode, altProductLine1,
altProductLine1SUB, `AM-LOS`, `GM-LOS`, hospital, `APR-DRG`, dischargeQTR, principalDiagnosis))
colnames(df_los) <- trimws(colnames(df_los))
colnames(df_los) <- trimws(colnames(df_los))
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Ensure that column names are as expected
print(colnames(df_los))
# Check for leading or trailing spaces in column names which might cause reference issues
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Let's examine the first few rows to ensure that data is read correctly
head(df_los)
# Assuming that your column names are correct and data looks fine, proceed with calculations
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%  # Use backticks if the name contains special characters or spaces
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
print(colnames(df_los))
# Further manipulations and clean-up
regress_me <- df_los %>%
select(-c(patientID, LOS, LOSGroupName, totalCharge, dischargeStatus,
principleDiagnosisCode, principalProcedureCode, altProductLine1,
altProductLine1SUB, `AM-LOS`, `GM-LOS`, hospital, `APR-DRG`, dischargeQTR, principalDiagnosis))
# Further manipulations and clean-up
regress_me <- df_los %>%
select(-c(patientID, LOS, LOSGroupName, totalCharge, dischargeStatus,
principleDiagnosisCode, principalProcedureCode, altProductLine1,
altProductLine1SUB, `AM-LOS`, `GM-LOS`, hospital, `APR_DRG`, dischargeQTR, principalDiagnosis))
# Converting categorical variables
regress_me <- regress_me %>%
mutate(across(c(admitType, month, admittedDOW, ageGroup, sex, race, ethnicity, productLine, payCode), as.factor),
riskOfMortality = factor(riskOfMortality, levels = c('1-Minor', '2-Moderate', '3-Major', '4-Extreme'), ordered = TRUE),
severity = factor(severity, levels = c('1-Minor', '2-Moderate', '3-Major', '4-Extreme'), ordered = TRUE))
# Display a summary of the dataframe to ensure all transformations are applied correctly
summary(regress_me)
# Load necessary library for linear models
library(stats)
# Fit a linear model
model <- lm(LOSDiscrepancyCost ~ ., data = regress_me)
# Check the summary of the model to ensure it's fitted well
summary(model)
# Calculate VIF
vif_values <- vif(model)
# Converting categorical variables
regress_me <- regress_me %>%
mutate(across(c(admitType, month, admittedDOW, ageGroup, sex, race, ethnicity, productLine, payCode), as.factor),
riskOfMortality = factor(riskOfMortality, levels = c('1-Minor', '2-Moderate', '3-Major', '4-Extreme'), ordered = TRUE),
severity = factor(severity, levels = c('1-Minor', '2-Moderate', '3-Major', '4-Extreme'), ordered = TRUE))
regress_me <- regress_me %>%
mutate_if(~ !is.numeric(.), as.factor)
# Display a summary of the dataframe to ensure all transformations are applied correctly
summary(regress_me)
# Load necessary library for linear models
library(stats)
# Fit a linear model
model <- lm(LOSDiscrepancyCost ~ ., data = regress_me)
# Check the summary of the model to ensure it's fitted well
summary(model)
# Calculate VIF
vif_values <- vif(model)
# Calculate VIF
vif_values <- vif(model)
library(dplyr)
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(car)
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Trim spaces in column names
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Display first few rows
head(df_los)
# Calculations assuming correct column names and data
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Prepare data for regression
regress_me <- df_los %>%
select(-c(patientID, LOS, LOSGroupName, totalCharge, dischargeStatus,
principleDiagnosisCode, principalProcedureCode, altProductLine1,
altProductLine1SUB, `AM-LOS`, `GM-LOS`, hospital, `APR_DRG`, dischargeQTR, principalDiagnosis)) %>%
mutate(across(c(admitType, month, admittedDOW, ageGroup, sex, race, ethnicity, productLine, payCode), as.factor),
riskOfMortality = factor(riskOfMortality, levels = c('1-Minor', '2-Moderate', '3-Major', '4-Extreme'), ordered = TRUE),
severity = factor(severity, levels = c('1-Minor', '2-Moderate', '3-Major', '4-Extreme'), ordered = TRUE)) %>%
mutate_if(~ !is.numeric(.), as.factor)
# Summary of data
summary(regress_me)
# Fit linear model
model <- lm(LOSDiscrepancyCost ~ ., data = regress_me)
# Model summary
summary(model)
# Check for multicollinearity
if(any(vif(model) > 10)) {
print("High multicollinearity detected")
}
print(vif(model))
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(car)
library(corrplot)
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Trim spaces in column names
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Display first few rows
head(df_los)
# Calculations assuming correct column names and data
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Simplify by focusing on key variables and check for multicollinearity
numeric_vars <- df_los %>% select_if(is.numeric)
cor_matrix <- cor(na.omit(numeric_vars))
corrplot(cor_matrix, method = "color")
# Preparing data with reference categories for factors
regress_me <- df_los %>%
select(patientID, admitType, admittedDOW, ageGroup, race, severity, LOSDiscrepancyCost) %>% # Select fewer variables for simplicity
mutate(
admitType = factor(admitType, levels = c("Elective", "Emergency", "Urgent")),
admittedDOW = factor(admittedDOW, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")),
ageGroup = factor(ageGroup, levels = c("0-18", "19-35", "36-55", "56-75", "76+")),
race = factor(race, levels = c("White", "Black", "Asian", "Other")),
severity = factor(severity, levels = c("Minor", "Moderate", "Major", "Extreme"))
) %>%
drop_na()
# Fit simplified linear model
simple_model <- lm(LOSDiscrepancyCost ~ admitType + admittedDOW + ageGroup + race + severity, data = regress_me)
summary(simple_model)
# Check VIF after fitting the model
library(car)
vif_values <- vif(simple_model)
print(vif_values)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(car)
library(corrplot)
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Trim spaces in column names
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Display first few rows
head(df_los)
# Calculations assuming correct column names and data
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%
drop_na(LOSDiscrepancyCost) %>%
filter(riskOfMortality != '0-Ungroupable') %>%
mutate(principalProcedure = na_if(principalProcedure, '-'))
# Simplify by focusing on key variables and check for multicollinearity
numeric_vars <- df_los %>% select_if(is.numeric)
cor_matrix <- cor(na.omit(numeric_vars))
corrplot(cor_matrix, method = "color")
# Preparing data with reference categories for factors
regress_me <- df_los %>%
select(patientID, admitType, admittedDOW, ageGroup, race, severity, LOSDiscrepancyCost) %>% # Select fewer variables for simplicity
mutate(
admitType = factor(admitType, levels = c("Elective", "Emergency", "Urgent")),
admittedDOW = factor(admittedDOW, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")),
ageGroup = factor(ageGroup, levels = c("0-18", "19-35", "36-55", "56-75", "76+")),
race = factor(race, levels = c("White", "Black", "Asian", "Other")),
severity = factor(severity, levels = c("Minor", "Moderate", "Major", "Extreme"))
) %>%
drop_na()
# Check factor levels after setting them
print(levels(regress_me$admitType))
print(levels(regress_me$admittedDOW))
print(levels(regress_me$ageGroup))
print(levels(regress_me$race))
print(levels(regress_me$severity))
# Inspect the data to see how many rows remain after all filtering and transformations
print(nrow(regress_me))
# If necessary, adjust filtering criteria or factor level settings
# For example, check if any day of the week or other categorical variable has no data
table(df_los$admittedDOW)
table(df_los$ageGroup)
table(df_los$race)
table(df_los$severity)
# Try fitting the model again, possibly with adjustments based on the diagnostics
simple_model <- lm(LOSDiscrepancyCost ~ admitType + admittedDOW + ageGroup + race + severity, data = regress_me)
# Check model summary
summary(simple_model)
# Check VIF if the model fits without errors
library(car)
vif_values <- vif(simple_model)
print(vif_values)
# Fit simplified linear model
simple_model <- lm(LOSDiscrepancyCost ~ admitType + admittedDOW + ageGroup + race + severity, data = regress_me)
summary(simple_model)
# Check VIF after fitting the model
library(car)
vif_values <- vif(simple_model)
print(vif_values)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(car)
library(corrplot)
# Load the data
df_los <- read_csv('./data/los_cleaned.csv')
# Trim spaces in column names
colnames(df_los) <- trimws(colnames(df_los))
print(colnames(df_los))
# Display first few rows
head(df_los)
# Initial transformations and calculations
df_los <- df_los %>%
mutate(LOSDiscrepancyCost = -(LOS - `GM-LOS`) * 1000) %>%
filter(riskOfMortality != '0-Ungroupable', !is.na(LOSDiscrepancyCost)) %>%
mutate(principalProcedure = na_if(principalProcedure, '-')) %>%
drop_na()
# Check for multicollinearity in numeric variables
numeric_vars <- df_los %>% select_if(is.numeric)
cor_matrix <- cor(na.omit(numeric_vars))
corrplot(cor_matrix, method = "color")
# Preparing data with reference categories for factors
regress_me <- df_los %>%
select(patientID, admitType, admittedDOW, ageGroup, race, severity, LOSDiscrepancyCost) %>%
mutate(
admitType = factor(admitType, levels = c("Elective", "Emergency", "Urgent")),
admittedDOW = factor(admittedDOW, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")),
ageGroup = factor(ageGroup, levels = c("0-18", "19-35", "36-55", "56-75", "76+")),
race = factor(race, levels = c("White", "Black", "Asian", "Other")),
severity = factor(severity, levels = c("Minor", "Moderate", "Major", "Extreme"))
) %>%
drop_na()
# Diagnostic checks
print(levels(regress_me$admitType))
print(levels(regress_me$admittedDOW))
print(levels(regress_me$ageGroup))
print(levels(regress_me$race))
print(levels(regress_me$severity))
print(nrow(regress_me))
# Inspect data consistency post-filtering
table(df_los$admittedDOW)
table(df_los$ageGroup)
table(df_los$race)
table(df_los$severity)
# Check if there is any data left to model
if(nrow(regress_me) > 0) {
# Fit the simplified linear model
simple_model <- lm(LOSDiscrepancyCost ~ admitType + admittedDOW + ageGroup + race + severity, data = regress_me)
summary(simple_model)
# Check for multicollinearity with VIF
vif_values <- vif(simple_model)
print(vif_values)
} else {
print("No data available to fit the model. Please adjust your filtering criteria.")
}
